# Copyright (c) 2025, ETGroup
# For license information, please see license.txt

import frappe
from frappe.model.document import Document
from frappe.utils import getdate
from frappe.model.naming import make_autoname


class CFMSExpense(Document):
	def before_insert(self):
		"""Validate and generate name before insert"""
		# FIRST: Validate conditional required fields
		if self.cfms_exp_expense_type == 'Project':
			if not self.cfms_exp_project_name:
				frappe.throw('Project Name is required for Project expenses')
		
		# THEN: Generate the name if validation passed
		if self.cfms_exp_month_incurred and self.cfms_exp_expense_type:
			# Extract YY-MM from date (short format)
			date_obj = getdate(self.cfms_exp_month_incurred)
			month_str = date_obj.strftime('%y%m')
			
			# Map expense type to 3-letter abbreviation
			type_map = {
				'Project': 'PRJ',
				'Overhead': 'OVH',
				'Financial': 'FIN',
				'Other': 'OTH'
			}
			exp_abbr = type_map.get(self.cfms_exp_expense_type, 'OTH')
			
			# Set name with auto counter
			if not self.name or self.name.startswith('new-'):
				self.name = make_autoname(f"EXP-{month_str}-{exp_abbr}-.####")
	
	def before_save(self):
		"""Set title - only for old records to make them readable"""
		# Check if this is an old ugly ID (not starting with EXP-)
		if self.name and not self.name.startswith('EXP-') and not self.name.startswith('new-'):
			# Old record - set descriptive title
			if self.cfms_exp_month_incurred and self.cfms_exp_expense_type:
				date_obj = getdate(self.cfms_exp_month_incurred)
				month_str = date_obj.strftime('%y%m')  # Short format
				type_map = {
					'Project': 'PRJ',
					'Overhead': 'OVH',
					'Financial': 'FIN',
					'Other': 'OTH'
				}
				exp_abbr = type_map.get(self.cfms_exp_expense_type, 'OTH')
				amt = self.cfms_exp_amount or 0
				self.title = f"{month_str}-{exp_abbr}-{amt:,.0f}"
		# For new records, title will be auto-set to name by Frappe
